{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","selected","removeGood","good","setState","filter","elem","addGood","this","className","length","slice","join","selectedGoods","map","classNames","includes","type","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"4PAIMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAOIC,E,4MACJC,MAAQ,CACNC,SAAU,CAAC,Q,EAGbC,WAAa,SAACC,GACZ,EAAKC,UAAS,SAAAJ,GAAK,MACjB,CAAEC,SAAUD,EAAMC,SAASI,QAAO,SAAAC,GAAI,OAAIA,IAASH,U,EAIvDI,QAAU,SAACJ,GACT,EAAKC,UAAS,SAAAJ,GAAK,MACjB,CAAEC,SAAS,GAAD,mBAAMD,EAAMC,UAAZ,CAAsBE,S,4CAIpC,WAAU,IAAD,OACCF,EAAaO,KAAKR,MAAlBC,SAeR,OACE,sBAAKQ,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,SAfkB,WACpB,OAAQR,EAASS,QACf,KAAK,EACH,MAAO,oBAET,KAAK,EACH,MAAM,GAAN,OAAUT,EAAV,gBAEF,QACE,MAAM,GAAN,OAAUA,EAASU,MAAM,GAAI,GAAGC,KAAK,MAArC,gBAAkDX,EAASA,EAASS,OAAS,GAA7E,kBAOCG,KAEH,oBAAIJ,UAAU,QAAd,SACGX,EAAgBgB,KAAI,SAAAX,GAAI,OACvB,qBAEEM,UAAWM,IACT,OACA,aACA,oBACA,CACE,iBAAkBd,EAASe,SAASb,KAP1C,UAWGA,EACD,qBAAKM,UAAU,eAAf,SACGR,EAASe,SAASb,GACjB,wBACEc,KAAK,SACLR,UAAU,iBACVS,QAAS,kBAAM,EAAKhB,WAAWC,IAHjC,oBAQA,wBACEc,KAAK,SACLR,UAAU,oBACVS,QAAS,kBAAM,EAAKX,QAAQJ,IAH9B,wBArBCA,QAkCX,wBACEc,KAAK,SACLR,UAAU,mBACVS,QAAS,kBAAM,EAAKd,SAAS,CAAEH,SAAU,MAH3C,0B,GA3EUkB,aAuFHpB,ICzGfqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d1b76b0b.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Component } from 'react';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype State = {\n  selected: string[],\n};\n\nclass App extends Component<{}, State> {\n  state = {\n    selected: ['Jam'],\n  };\n\n  removeGood = (good: string) => {\n    this.setState(state => (\n      { selected: state.selected.filter(elem => elem !== good) }\n    ));\n  };\n\n  addGood = (good: string) => {\n    this.setState(state => (\n      { selected: [...state.selected, good] }\n    ));\n  };\n\n  render() {\n    const { selected } = this.state;\n\n    const selectedGoods = () => {\n      switch (selected.length) {\n        case 0:\n          return 'No goods selected';\n\n        case 1:\n          return `${selected} is selected`;\n\n        default:\n          return `${selected.slice(0, -1).join(', ')} and ${selected[selected.length - 1]} are selected`;\n      }\n    };\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">\n          {selectedGoods()}\n        </h1>\n        <ul className=\"level\">\n          {goodsFromServer.map(good => (\n            <li\n              key={good}\n              className={classNames(\n                'good',\n                'level-item',\n                'has-text-centered',\n                {\n                  'good--selected': selected.includes(good),\n                },\n              )}\n            >\n              {good}\n              <div className=\"good__button\">\n                {selected.includes(good) ? (\n                  <button\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={() => this.removeGood(good)}\n                  >\n                    Remove\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    className=\"button is-primary\"\n                    onClick={() => this.addGood(good)}\n                  >\n                    Select\n                  </button>\n                )}\n              </div>\n            </li>\n          ))}\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"button is-danger\"\n          onClick={() => this.setState({ selected: [] })}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}